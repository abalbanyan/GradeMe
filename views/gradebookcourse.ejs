<%- include partials/header.ejs %>
<head>
    <link rel="stylesheet" href="/css/gradebook.css">
    <script></script>
</head>

<body>
<div class="container">
    <h2><%- course.name %> </h2>
    <h6>Course Total: <%= maxCourseGrade %></h6>
    <div class="dropdown show">
        <a class="btn btn-secondary dropdown-toggle" href="#" role="button" id="dropdownMenuLink" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
            Gradebook Navigation
        </a>
        
        <div class="dropdown-menu" aria-labelledby="dropdownMenuLink">
        <% for(var i = 0; i < assignmentNames.length; i++) { %>
            <a class="dropdown-item" href="<%= "/gradebook?courseid=" + course._id + "&assignid=" + assignments[i] %>"><%= assignmentNames[i] %></a>
        <% } %>
        </div>
    </div>

    <table class="table">
        <thead>
            <tr>
                <% for(var i = 0; i < headersoutertable.length; i++) { %>
                    <th scope="col"><%= headersoutertable[i] %></th>
                <% } %>
            </tr>
        </thead>
        <tbody>
            <% for(var i = 0; i < tablerows.length; i++) { %>
                <tr class="user-row">
                    <th scope="row" class="user-id"><%= tablerows[i].uid %></th>
                    <td>
                        <%= tablerows[i].name %>
                    </td>
                    <td>
                        <span class="total-grade"><%= tablerows[i].studentTotalGrade %></span>
                        <a href="<%= "#collapsible" + i %>" class="material-icons expand-grade" data-toggle="collapse">arrow_drop_down_circle</a>
                        <table id="<%= "collapsible"+ i %>" class="table inner-table collapse">
                            <thead>
                                <tr>
                                    <th scope="col">
                                        Assignment
                                    </th>
                                    <th scope="col">
                                        Grade
                                    </th>
                                    <th scope="col">
                                    </th>
                                </tr>
                            </thead>
                            <% for(var j = 0; j < tablerows[i].assignmentGrades.length; j++) { %>
                                <tr>
                                    <th scope="row" class="assignment-name"><%= assignmentNames[j] %></th>
                                    <td class="assignment-grade">
                                        <span class="original-grade"><%= tablerows[i].assignmentGrades[j] %></span>
                                        <span>
                                            <input type="number" min="0" class="grade-editor">
                                        </span>
                                        <i class="material-icons edit-grade">edit</i>
                                        <i class="material-icons undo-grade">undo</i>
                                        <i class="material-icons done-grade">done</i>
                                    </td>

                                    <td>
                                        <button type="button" class="btn btn-primary">Grade</button>
                                    </td>
                                </tr>
                            <% } %>
                        </table>
                    </td>
                </tr>
            <% } %>
        </tbody>
    </table>
</div>
</body>

<%- include partials/footer.ejs %>

<script>
    $(document).ready(function() {

        $(".edit-grade").click(function(){
            editGrade($(this).closest("td"));
        });

        $(".original-grade").dblclick(function(){
            editGrade($(this).closest("td"));
        });

        $(".undo-grade").click(function(){
            $(this).hide();
            var parenttd = $(this).closest("td");
            parenttd.find(".done-grade").hide();
            parenttd.find(".grade-editor").hide();
            parenttd.find(".original-grade").show();
            parenttd.find(".edit-grade").show();
        });

        $(".done-grade").click(async function(){
            var assignments = <%- JSON.stringify(assignments) %>; // Get assignment variable from ejs variables.
            var students = <%- JSON.stringify(students) %>;
            var parenttd = $(this).closest("td");
            parenttd.find(".grade-editor").change();
            let gradeDifference = await changeGrade(parenttd, assignments[parenttd.closest("tr").index()], students[$(this).closest(".user-row").index()]);
            if (gradeDifference != 0) {
                let totalGradeCell = $(this).closest("table").closest("td").find(".total-grade");
                totalGradeCell.text(Number(totalGradeCell.text()) + gradeDifference);
            }
        });

        $(".grade-editor").on('keyup', async function (e){
            var assignments = <%- JSON.stringify(assignments) %>; // Get assignment variable from ejs variables.
            var students = <%- JSON.stringify(students) %>;
            if (e.keyCode == 13) { // If user presses enter.
                $(this).change();
                let gradeDifference = await changeGrade($(this).closest("td"), assignments[$(this).closest("tr").index()], students[$(this).closest(".user-row").index()]);
                if (gradeDifference != 0) {
                    let totalGradeCell = $(this).closest("table").closest("td").find(".total-grade");
                    totalGradeCell.text(Number(totalGradeCell.text()) + gradeDifference);
                }
            }
        });

        $(".expand-grade").click(function(){
            if ($(this).text() == "arrow_drop_down_circle") {
                $(this).text("expand_less");
            } else {
                $(this).text("arrow_drop_down_circle");
            }
        });

        function editGrade(el) {
            el.find(".edit-grade").hide();
            el.find(".undo-grade").show();
            el.find(".done-grade").show();
            el.find(".original-grade").hide();
            el.find(".grade-editor").show();
        }
        
        // Returns the value of the new grade - old grade or 0 if an error occurred.
        async function changeGrade(el, assignmentid, user_id) {
            let new_grade = el.find(".grade-editor").val();
            let old_grade = el.find(".original-grade").text();
            old_grade = (old_grade == "ungraded" || old_grade == "no submission") ? 0 : Number(old_grade);
            let course = <%- JSON.stringify(course) %>;
            if ($.isNumeric(new_grade) && new_grade >= 0) {
                let response = await fetch('/api/changeGrade?user=' + user_id + '&assign_id=' + assignmentid + '&new_grade=' + new_grade + '&course_id=' + course._id,
                    { method: 'GET', credentials: 'same-origin'});
                let json = await response.json();
                let data = JSON.parse(json);

                if (data.valid) {
                    el.find(".undo-grade").hide();
                    el.find(".done-grade").css("color", "green");
                    el.find(".original-grade").text(new_grade);
                    el.find(".original-grade").show();
                    el.find(".grade-editor").hide();
                    setTimeout(function () {
                        el.find(".done-grade").hide();
                        el.find(".done-grade").css("color", "initial");
                        el.find(".edit-grade").show();
                    }, 1500);
                } else {
                    alert("We are experiencing database issues and cannot update this grade. Please notify an administrator.");
                    return 0;
                }
            } else {
                alert("no negative numbers allowed");
                return 0;
            }
            return new_grade - old_grade;
        }
    });
</script>